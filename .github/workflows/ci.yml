# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      env:
        PGHOST: localhost
        PGDATABASE: central
        PGUSERNAME: root
        PGPASSWORD: root
    - name: Add PostgreSQL binaries to PATH
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "$PGBIN" >> $GITHUB_PATH
        elif [ "$RUNNER_OS" == "Linux" ]; then
          echo "$(pg_config --bindir)" >> $GITHUB_PATH
        fi
    - name: Start preinstalled PostgreSQL
      shell: bash
      run: |
        echo "Initializing database cluster..."

        # Convert backslashes to forward slashes in RUNNER_TEMP for Windows Git Bash
        export PGHOST="${RUNNER_TEMP//\\//}/postgres"
        export PGDATA="$PGHOST/pgdata"
        mkdir -p "$PGDATA"

        # initdb requires file for password in non-interactive mode
        export PWFILE="$RUNNER_TEMP/pwfile"
        echo "postgres" > $PWFILE
        initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"

        echo "Starting PostgreSQL..."
        echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
        pg_ctl start

        echo "Creating user..."
        psql --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"

        echo "Creating database..."
        createdb --owner="$PGUSERNAME" --username="postgres" "$PGDATABASE"
    # TODO: setup database for tests
    - name: Test with pytest
      run: |
        pytest
