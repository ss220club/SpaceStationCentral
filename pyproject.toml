[project]
name = "SpaceStationCentral"
version = "0.1.0"
description = "SS220 API for game servers and infrastructure"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiocache>=0.12.3",
    "aiohttp>=3.10.11",
    "alembic>=1.14.1",
    "discord>=2.3.2",
    "fastapi[standard]>=0.112.0,<0.113.0",
    "mysql-connector-python>=9.0.0",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.8.2,<3.0.0",
    "pydantic-settings>=2.8.1",
    "redis>=5.2.1",
    "sqlalchemy>=2.0.33,<3.0.0",
    "sqlmodel>=0.0.24",
]
[dependency-groups]
dev = [
    "autopep8>=2.3.1",
    "basedpyright>=1.28.1",
    "hatch>=1.14.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-env>=1.1.5",
    "pytest-mock>=3.14.0",
    "ruff>=0.9.10",
]

[tool.uv]
required-version = ">=0.6.5"
package = false

[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app", "tests"]

[tool.hatch.envs.default]
path = ".venv"

[tool.hatch.envs.default.scripts]
test = "pytest"
lint = "uv run scripts/lint.py"
format = "ruff format ."
lock = "uv sync && uv pip compile pyproject.toml -o requirements.lock --universal"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
addopts = "--cov=app --cov-report=term-missing"

[tool.pytest_env]
SSC_TEST = "true"
SSC_CONFIG_FILE = "config_example.toml"

[tool.coverage.run]
branch = true
relative_files = true
source = ["app", "tests"]

[tool.coverage.report]
skip_covered = true
show_missing = true

[tool.ruff]
src = ["app", "tests"]
line-length = 120
target-version = "py313"
exclude = [
    "__pycache__",
    "__pypackages__",
    "_build",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git-rewrite",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "*.egg-info",
    "alembic/versions",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "ANN",  # flake8-annotations (type hints)
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "FAST", # FastAPI
    "I",    # isort
    "N",    # pep8-naming
    "PL",   # pylint
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]
ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in `__init__`
    "D212",    # Multi-line summary first line
    "D401",    # First line of docstring should be in imperative mood
    "PLR0913", # Too many arguments in function definition
    "TC006",   # Add quotes to type expression in `typing.cast()`
]
fixable = ["ALL"]

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"!app/**.py" = ["D"]
"tests/**/*.py" = ["S101", "TID252", "PLR2004"]

[tool.basedpyright]
typeCheckingMode = "recommended"
pythonVersion = "3.13"
venvPath = ".venv"
include = ["app", "tests"]
exclude = [
    "**/alembic/versions"
]
reportAny = false
reportExplicitAny = false
reportUnusedCallResult = false
reportUnannotatedClassAttribute = false
